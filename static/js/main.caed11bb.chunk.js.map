{"version":3,"sources":["firebase/firebase.js","Context/context.js","keys.js","Components/Buttons/buttons.js","Components/Image/image.js","Components/No-Gifs/no-gifs.js","Components/search-bar/search-bar.js","Components/Image-container/image-container.js","Components/Mainpage/main-page.js","Components/Saved/Saved-Image/saved-image.js","Components/No-Images/no-images.js","Components/Saved/saved.js","Components/Header/header.js","Components/login-signup/login/login.js","Components/login-signup/signup/signup.js","Components/login-signup/login-signup.js","App.js","reportWebVitals.js","index.js"],"names":["createUserProfileDocument","userAuth","additionalData","a","userRef","firestore","doc","uid","collectionRef","collection","get","snapShot","exists","displayName","email","createdAt","Date","set","user","data","console","log","onLoginData","dataRef","saveDataToFirebase","userData","update","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","analytics","GoogleAuthProvider","setCustomParameters","prompt","appContext","createContext","Provider","props","useState","search","setSearch","gifs","setGifs","loading","setLoading","setTest","saved","setSaved","location","setLocation","currentUser","setCurrentUser","isFirstRender","setIsFirstRender","useEffect","fetchData","fetch","response","json","length","id","value","actions","updateSearch","removeItemFromSaved","item","filteredList","filter","i","children","CustomButton","isGoogleButton","onClick","type","className","Image","useContext","src","images","fixed_width","webp","find","image","NoGifs","message","SearchBar","query","setQuery","nouns","Math","floor","random","word","setWord","randomPlaceholder","setInterval","randomNumber","onSubmit","e","preventDefault","onChange","target","placeholder","ImageContainer","map","gif","MainPage","SavedImage","downsized_medium","url","title","NoImages","to","SavedPage","index","Header","history","useLocation","useHistory","handleSignout","signOut","push","Login","toggleMethod","currentMethod","setEmail","password","setPassword","incorrectLogin","setIncorrectLogin","handleChange","name","handleSubmit","signInWithEmailAndPassword","redirectAfterGoogleAuth","signInWithPopup","for","SignUp","setDisplayName","confirmedPassword","setConfirmedPassword","passwordMatch","setPasswordMatch","createUserWithEmailAndPassword","SignInAndUp","method","App","onAuthStateChanged","onSnapshot","getDataFromFirestore","firestoreData","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.caed11bb.chunk.js","sourcesContent":["import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/firestore';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/analytics';\r\nimport { getDatabase, ref, set } from \"firebase/database\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAlx7NLSfWvOYIUsT1YSIICW3s17BS3oZI\",\r\n  authDomain: \"gif-search-app-39faa.firebaseapp.com\",\r\n  projectId: \"gif-search-app-39faa\",\r\n  storageBucket: \"gif-search-app-39faa.appspot.com\",\r\n  messagingSenderId: \"954418677105\",\r\n  appId: \"1:954418677105:web:cf01c1c71cb877e04662d0\",\r\n  measurementId: \"G-75Y0HLMX40\"\r\n};\r\n\r\n\r\n//create new user from sign-up form//\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`)\r\n  const collectionRef = firestore.collection('users');\r\n\r\n  const snapShot = await userRef.get();\r\n  const collectionSnapshot = await collectionRef.get();\r\n\r\n  if (!snapShot.exists) {\r\n    const {displayName, email} = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await userRef.set({\r\n        user: {\r\n          displayName,\r\n          email,\r\n          createdAt,\r\n          ...additionalData\r\n        },\r\n        data: {\r\n          additionalData\r\n        }\r\n      })\r\n    } catch(error) {\r\n      console.log('error creating account', error)\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\nexport const onLoginData = async(userAuth) => {\r\n\r\n  const dataRef = await firestore.collection(`users`).doc(userAuth);\r\n  const data = await dataRef.get();\r\n\r\n  if (!data.exists) {\r\n    console.log('no data for user')\r\n  } else {\r\n    console.log(data.data())\r\n    return data.data();\r\n  }\r\n};\r\n\r\n\r\nexport const saveDataToFirebase = async (userAuth, data) => {\r\n\r\n  const userRef = firestore.doc(`users/${userAuth}`);\r\n  const collectionRef = firestore.collection(`users/${userAuth}/data`);\r\n  const userData = firestore.collection('users').doc(userAuth);\r\n\r\n  try {\r\n    await userData.update({\r\n      data\r\n    })\r\n  } catch(error) {\r\n    console.log('Error saving data', error)\r\n  }\r\n\r\n};\r\n\r\n\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(config);\r\n// const app = initializeApp(config)\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\nconst analytics = firebase.analytics();\r\n\r\n//Google sign in//\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt: 'select_account'});\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;\r\n","import React, {useState, createContext, useEffect, useRef} from 'react'\r\nimport {useHistory} from 'react-router-dom';\r\nimport {saveDataToFirebase} from '../firebase/firebase.js';\r\n\r\nimport Key from '../keys.js'\r\n\r\nexport const appContext = createContext();\r\n\r\nexport const Provider = (props) => {\r\n\r\n  //App context state variables//\r\n  const [search, setSearch] = useState('cats');\r\n  const [gifs, setGifs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [test, setTest] = ('');\r\n  const [saved, setSaved] = useState([]);\r\n  const [location, setLocation] = useState('/');\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [isFirstRender, setIsFirstRender] = useState(true);\r\n\r\n  //On initial loading, we obtain a list of gifs from our giphy api, firstly with the initial value of 'cats' and populate our 'gifs' state variable with the returned response/\r\n  useEffect(() => {\r\n\r\n    const fetchData = async() => {\r\n      let response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${Key}&q=${search}&limit=24&offset=0&rating=g&lang=en`)\r\n      let data = await response.json()\r\n      console.log(data)\r\n\r\n      if (data.data.length) {\r\n        await setGifs(data.data);\r\n        await setLoading(false);\r\n        setIsFirstRender(false);\r\n      } else {\r\n        setGifs([])\r\n        await setLoading(true);\r\n\r\n      }\r\n    }\r\n    if (currentUser) {\r\n      //If there is a current user logged in, any gifs a user saves will be pushed to firebase againt their account.\r\n      saveDataToFirebase(currentUser.id, saved);\r\n    }\r\n    fetchData(search)\r\n  }, [search, saved])\r\n\r\n\r\n  //This function will remove a saved item from the users saved gifs. It will filter through the list of gifs and purge that which are deleted.\r\n  const removeItemFromSaved = (item) => {\r\n    console.log(item);\r\n    const filteredList = saved.filter(i => i.id !== item)\r\n    setSaved([...filteredList])\r\n  }\r\n\r\n  //On field input change this function will populate the local state above with the respective field values//\r\n  const updateSearch = (value) => {\r\n    setSearch(value)\r\n  }\r\n\r\n\r\n  return (\r\n    <appContext.Provider value={{\r\n      data: {gifs, search, loading, saved, location, currentUser, isFirstRender},\r\n      actions: {updateSearch, setTest, setSaved, setLocation, setCurrentUser, removeItemFromSaved, setIsFirstRender, setSearch},\r\n    }}>\r\n      {props.children}\r\n    </appContext.Provider>\r\n  )\r\n\r\n}\r\n","const Key = 'ukcN2yaE6mkO1qiWkaf9DlobDlAguWh9'\r\n\r\nexport default Key;\r\n","import React from 'react';\r\nimport './buttons.scss';\r\n\r\nconst CustomButton = ({children, isGoogleButton, onClick, ...rest}) => {\r\n\r\n\r\n  return (\r\n    <button onClick={onClick} type={isGoogleButton ? 'button' : ''} className={`${isGoogleButton ? 'custom-button google' : ''} custom-button`}>\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default CustomButton;\r\n","import React, {useContext} from 'react';\r\nimport {appContext} from '../../Context/context.js';\r\nimport './image.scss';\r\nimport CustomButton from '../Buttons/buttons.js';\r\n\r\nconst Image = (props) => {\r\n\r\n\r\n  const {actions, data} = useContext(appContext);\r\n\r\n  //This function is called whenever a user clicks 'save' on an image. The fuction will loop through existing saved images and return nothing if there is an existing saved image with the same ID//\r\n  //If the image isn't a duplicate it will save the image to the saved context state and it will appear on the saved page//\r\n  const handleSaveImage = () => {\r\n    const findExisting = data.saved.find((image) => image.id === props.data.id)\r\n    if (findExisting) {\r\n      return\r\n    } else {\r\n      actions.setSaved([...data.saved, props.data])\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='image'>\r\n      <img className='gif' src={props.data.images.fixed_width.webp}/>\r\n      {\r\n        data.currentUser ? <button onClick={handleSaveImage} className='save-image-button'>Save</button> : null\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Image;\r\n","import React from 'react';\r\nimport './no-gifs.scss';\r\n\r\nconst NoGifs = ({message}) => {\r\n\r\n  return (\r\n    <div className='no-gifs-container'>\r\n      <h2 className='no-gifs-desc'>{message}</h2>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default NoGifs\r\n","import React, {useState, useContext, useEffect} from 'react';\r\nimport {appContext} from '../../Context/context.js';\r\nimport './search-bar.scss';\r\n\r\nconst SearchBar = () => {\r\n\r\n  const [query, setQuery] = useState('');\r\n  const {data, actions} = useContext(appContext);\r\n\r\n  //list of nouns to periodically display in the searchbar as a placeholder.\r\n  let nouns = [\r\n    'cats',\r\n    'dogs',\r\n    'trees',\r\n    'pizza',\r\n    'space',\r\n    'computers',\r\n    'crystals',\r\n    'colors',\r\n    'rainbow',\r\n    'coffee',\r\n    'food',\r\n    'beaches',\r\n    'funny',\r\n    'weird',\r\n    'funny',\r\n    'famous',\r\n    'interesting',\r\n    'memes',\r\n    'cute',\r\n    'scary',\r\n    'movies',\r\n    'robots',\r\n    'cars',\r\n    'sports',\r\n    'disco',\r\n    'fractals',\r\n    'pigs'\r\n  ]\r\n\r\n  //selecting a random word from the array above\r\n  const [word, setWord] = useState(nouns[Math.floor(Math.random() * (nouns.length - 1) + 1)])\r\n\r\n  //on page load, call the randomPlaceholder function which will select a new random word every three seconds\r\n  useEffect(() => {\r\n    randomPlaceholder();\r\n  }, [])\r\n\r\n  const randomPlaceholder = () => {\r\n    setInterval(() => {\r\n      let randomNumber = Math.floor(Math.random() * (nouns.length - 1) + 1);\r\n      setWord(nouns[randomNumber])\r\n    }, 3000)\r\n  }\r\n\r\n  //On field input change this function will populate the local state above with the respective field values//\r\n  const handleChange = (e) => {\r\n    setQuery(e.target.value)\r\n  };\r\n\r\n  //When the user submits a word in the search bar, this function will run and pass the string valye to the updateSearch fuction in our context which will repopulate the page with new corresponsing images from the gif api.\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    actions.updateSearch(query);\r\n    setQuery('');\r\n  }\r\n\r\n  return (\r\n    <div className='search-bar'>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className='input-field-container'>\r\n          <input className='input-field' onChange={handleChange} type='text' placeholder={`Search for ${word}`} value={query} />\r\n        </div>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBar;\r\n","import './image-container.scss';\r\nimport React, {useContext, useState, useEffect} from 'react';\r\nimport {appContext} from '../../Context/context.js';\r\n\r\nimport Image from '../Image/image.js';\r\nimport NoGifs from '../No-Gifs/no-gifs.js';\r\nimport SearchBar from '../search-bar/search-bar.js';\r\n\r\nconst ImageContainer = () => {\r\n\r\n  const {data, loading} = useContext(appContext);\r\n\r\n  return (\r\n    <div className='image-page-container'>\r\n\r\n      <div className='search-bar-comtainer'>\r\n        <SearchBar />\r\n      </div>\r\n\r\n    {\r\n      data.loading\r\n      ?\r\n      (\r\n        <NoGifs message={data.isFirstRender ? 'Loading..' :`No images found for ${data.search || null}, search again.`}/>\r\n      ) : (\r\n        <div className='image-container'>\r\n          {data.gifs.map((gif) => <Image data={gif} />)}\r\n        </div>\r\n      )\r\n    }\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default ImageContainer;\r\n","import React from 'react';\r\n\r\nimport ImageContainer from '../Image-container/image-container.js';\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n  return (\r\n    <div>\r\n      <ImageContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MainPage;\r\n","import React, {useContext} from 'react';\r\nimport {appContext} from '../../../Context/context.js';\r\n\r\nimport './saved-image.scss';\r\n\r\nconst SavedImage = ({data}) => {\r\n\r\n  const {actions} = useContext(appContext);\r\n\r\n  //if a user click on 'remove', this function will call the removeItemFromSaved function from context which will attempt to remove the saved image from the users saved images and further, remove it from firestore.\r\n  const handleRemove = () => {\r\n    actions.removeItemFromSaved(data.id);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='saved-image-container'>\r\n\r\n      <div className='image-saved'>\r\n        <img className='actual-saved-image' src={data.images.downsized_medium.url}/>\r\n        <button className='remove-button' onClick={handleRemove} >Remove</button>\r\n      </div>\r\n\r\n      <div className='title-info'>\r\n        <h3>{data.title}</h3>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SavedImage;\r\n","import React, {useContext} from 'react';\r\nimport {appContext} from '../../Context/context.js';\r\nimport {Link} from 'react-router-dom';\r\nimport './no-images.scss';\r\n\r\nconst NoImages = () => {\r\n\r\n  const {data} = useContext(appContext);\r\n\r\n  return (\r\n    <div className='no-images-container'>\r\n\r\n      {\r\n        data.saved.length === 0 && data.currentUser !== null\r\n        ? <h2 className='no-images-desc'>Images you save will show here</h2>\r\n        : <h2 className='no-images-desc'>Please <Link className='direct-to-login' to='/login'>Login</Link> to save images</h2>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default NoImages;\r\n","import React, {useContext} from 'react';\r\nimport {appContext} from '../../Context/context.js';\r\nimport './saved.scss';\r\n\r\nimport SavedImage from './Saved-Image/saved-image.js';\r\nimport NoImages from '../No-Images/no-images.js';\r\n\r\n\r\nconst SavedPage = () => {\r\n\r\n  const {data, actions} = useContext(appContext);\r\n\r\n  return (\r\n    <div className='saved-page-container'>\r\n      {\r\n        data.saved.length\r\n        ? data.saved.map((image, index) => <SavedImage data={image} key={image.id} />)\r\n        : <NoImages />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SavedPage;\r\n","import React, {useContext, useState, useEffect} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport './header.scss';\r\nimport {appContext} from '../../Context/context.js';\r\nimport CustomButton from '../Buttons/buttons.js';\r\nimport {auth} from '../../firebase/firebase.js';\r\n\r\nconst Header = () => {\r\n\r\n  const {data: {search, location, saved, currentUser}, actions} = useContext(appContext);\r\n\r\n  const newLocation = useLocation();\r\n  const history = useHistory();\r\n\r\n  //On sign-out this function will call the signOut function from firebase auth library then clear the saved photos from local state//\r\n  const handleSignout = async() => {\r\n    await auth.signOut();\r\n    await actions.setSaved([]);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='nav-bar-container'>\r\n\r\n      <div onClick={() => {\r\n        history.push('/')\r\n        actions.setSearch('cats')\r\n      }} className='title'>\r\n        <span>Gif Search</span>\r\n      </div>\r\n\r\n      <div className='login-out-buttons'>\r\n\r\n\r\n      </div>\r\n\r\n\r\n      <div className='login-out-buttons'>\r\n          <Link className='saved' to='/' onClick={() => actions.setSearch('cats')} >Home</Link>\r\n          <Link className='saved' to='/saved'>Saved</Link>\r\n          {\r\n            currentUser\r\n            ? <span className='logout' onClick={handleSignout}>Signout</span>\r\n            : <Link className='saved' to='/login'>Login</Link>\r\n          }\r\n      </div>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;\r\n","import React, {useState, useRef} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './login.scss';\r\nimport CustomButton from '../../Buttons/buttons.js';\r\nimport {signInWithGoogle} from '../../../firebase/firebase.js';\r\nimport {auth} from '../../../firebase/firebase.js';\r\n\r\n\r\nconst Login = ({toggleMethod, currentMethod}) => {\r\n\r\n  //Local state for fields//\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const history = useHistory();\r\n  const [incorrectLogin, setIncorrectLogin] = useState(false);\r\n\r\n\r\n  //On field input change this function will populate the local state above with the respective field values//\r\n  const handleChange = (e) => {\r\n    if (e.target.name === 'email') {\r\n      setEmail(e.target.value)\r\n    } else {\r\n      setPassword(e.target.value)\r\n    }\r\n  }\r\n\r\n\r\n  //When a user clicks sign-in with an existing account, we will fire the signInWithEmailAndPassword utility from firebase auth, if successful, the user is pushed back to the home page.\r\n  //If the login in incorrect, we set the incorrectLogin state boolean value to true which then displays an 'incorrect login' prompt\r\n  const handleSubmit = async(e) => {\r\n    e.preventDefault();\r\n    try {\r\n      await auth.signInWithEmailAndPassword(email, password);\r\n      setEmail('');\r\n      setPassword('');\r\n      setIncorrectLogin(false);\r\n      history.push('/');\r\n    } catch(error) {\r\n      console.log('error signing in w/ u/p', error)\r\n      setIncorrectLogin(true);\r\n    }\r\n  }\r\n\r\n\r\n  //if a user decided to authenticate with google, we execute the signInWithGoogle utility from firebase auth then push the user to the home page.\r\n  const redirectAfterGoogleAuth = async() => {\r\n    try {\r\n      await signInWithGoogle();\r\n      history.push('/')\r\n    } catch(error) {\r\n      console.log('error signing in with google')\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className='login-container'>\r\n      <h3>Log in with existing account</h3>\r\n\r\n      <form className='login-form' onSubmit={handleSubmit}>\r\n\r\n        <label for='email'>Email</label>\r\n        <input type='email' name='email' value={email} onChange={handleChange}/>\r\n\r\n        <label for='password'>Password</label>\r\n        <input type='password' name='password' value={password} onChange={handleChange}/>\r\n\r\n        <div className='sign-in-buttons'>\r\n          <CustomButton>Sign in</CustomButton>\r\n          <CustomButton isGoogleButton onClick={redirectAfterGoogleAuth}>Google</CustomButton>\r\n        </div>\r\n\r\n        <p className={incorrectLogin ? 'incorrect-login' : 'hidden'}>Incorrect login</p>\r\n        <span className='toggle-method' onClick={() => toggleMethod(!currentMethod)}> Don't have an account? Create one! </span>\r\n\r\n      </form>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login;\r\n","import React, {useState} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport './signup.scss';\r\nimport {auth, createUserProfileDocument} from '../../../firebase/firebase.js';\r\n\r\nimport CustomButton from '../../Buttons/buttons.js';\r\n\r\nconst SignUp = ({toggleMethod, currentMethod}) => {\r\n\r\n  //Local state variables//\r\n  const [displayName, setDisplayName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [confirmedPassword, setConfirmedPassword] = useState('')\r\n  const [passwordMatch, setPasswordMatch] = useState(true);\r\n\r\n  const history = useHistory();\r\n\r\n  //On field input change this function will populate the local state above with the respective field values//\r\n  const handleChange = (e) => {\r\n    if (e.target.name === 'displayName') {\r\n      setDisplayName(e.target.value)\r\n    } else if (e.target.name === 'email') {\r\n      setEmail(e.target.value)\r\n    } else if (e.target.name === 'password') {\r\n      setPassword(e.target.value)\r\n    } else if (e.target.name === 'confirmedPassword') {\r\n      setConfirmedPassword(e.target.value)\r\n    }\r\n  }\r\n\r\n  //On form submission we take the values of each field and run them through the createUserWithEmailAndPassword function from our firebase utilities. This will then create an account in firestore which will allow the user to sign in.\r\n  const handleSubmit = async (e) => {\r\n    console.log(email, password)\r\n    e.preventDefault();\r\n\r\n    //If 'password', and 'confirmed password' fields don't match, then display an error stating so\r\n    if (password !== confirmedPassword) {\r\n      setPasswordMatch(false);\r\n      return\r\n    }\r\n\r\n    try {\r\n      const {user} = await auth.createUserWithEmailAndPassword(email, password)\r\n      await createUserProfileDocument(user, {displayName});\r\n      setDisplayName('');\r\n      setEmail('');\r\n      setPassword('');\r\n      setConfirmedPassword('');\r\n      setPasswordMatch(true);\r\n      history.push('/')\r\n    } catch(error) {\r\n      console.log('Error during signup', error)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='signup-container'>\r\n      <h3 >Create a new account</h3>\r\n\r\n      <form className='login-form' onSubmit={handleSubmit}>\r\n\r\n        <label for='displayName'>Username</label>\r\n        <input type='displayName' name='displayName' onChange={handleChange} value={displayName}/>\r\n\r\n        <label for='email'>Email</label>\r\n        <input type='email' name='email' onChange={handleChange} value={email}/>\r\n\r\n        <label className={passwordMatch ? '' : 'no-match'} for='password'>Password</label>\r\n        <input type='password' name='password' onChange={handleChange} value={password}/>\r\n\r\n        <label className={passwordMatch ? '' : 'no-match'} for='confirmedPassword'>Confirm Password</label>\r\n        <input type='password' name='confirmedPassword' onChange={handleChange} value={confirmedPassword}/>\r\n\r\n        <CustomButton type='submit' >Sign up!</CustomButton>\r\n\r\n        <span className='toggle-method' onClick={() => toggleMethod(!currentMethod)}> Already have an account? Sign in! </span>\r\n\r\n      </form>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignUp;\r\n","import React, {useState} from 'react';\r\nimport './login-signup.scss';\r\n\r\nimport Login from './login/login.js';\r\nimport SignUp from './signup/signup.js';\r\n\r\nconst SignInAndUp = () => {\r\n\r\n  const [method, toggleMethod] = useState(true)\r\n\r\n  return (\r\n    <div className='sign-in-and-up-container'>\r\n\r\n      {\r\n        method\r\n        ? <Login toggleMethod={toggleMethod} currentMethod={method}/>\r\n        : <SignUp toggleMethod={toggleMethod} currentMethod={method}/>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SignInAndUp;\r\n","import './App.scss';\nimport React, {useEffect, useState, useContext} from 'react';\nimport {auth, createUserProfileDocument, onLoginData} from './firebase/firebase.js';\nimport {appContext} from './Context/context.js';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\n//Components//\nimport MainPage from './Components/Mainpage/main-page.js';\nimport SavedPage from './Components/Saved/saved.js';\nimport Header from './Components/Header/header.js';\nimport SignInAndUp from './Components/login-signup/login-signup.js';\n\n\nfunction App() {\n\n  const {data, actions} = useContext(appContext);\n\n  let unsubscribeFromAuth = null;\n\n  useEffect(() => {\n\n    unsubscribeFromAuth = auth.onAuthStateChanged(async (userAuth) => {\n      if (userAuth) {\n        const userRef = await createUserProfileDocument(userAuth, data.saved);\n\n        if (data.isFirstRender) {\n          userRef.onSnapshot(snapShot => {\n            actions.setCurrentUser({\n              id: snapShot.id,\n              ...snapShot.data,\n              userData: {\n                displayName: userAuth.displayName,\n                email: userAuth.email,\n              }\n            })\n          })\n        }\n\n        const getDataFromFirestore = async() => {\n          const firestoreData = await onLoginData(userAuth.uid);\n          const response = await firestoreData;\n          console.log(response)\n          if (response.data.length) {\n            const data = await response.data.map(item => item);\n            await actions.setSaved([...data]);\n          } else {\n            return\n          }\n\n        }\n        getDataFromFirestore();\n      }\n      actions.setCurrentUser(userAuth);\n      actions.setIsFirstRender(false);\n    })\n  }, [])\n\n  return (\n    <div className=\"app-container\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={MainPage} />\n          <Route path='/saved' component={SavedPage} />\n          <Route path='/login' component={SignInAndUp} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from './Context/context.js';\n\nReactDOM.render(\n  <Provider>\n    <React.StrictMode>\n    <div className='main-app-container'>\n      <App />\n    </div>\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}